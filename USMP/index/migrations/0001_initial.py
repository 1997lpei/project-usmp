# -*- coding: utf-8 -*-
# Generated by Django 1.9.12 on 2019-08-30 15:34
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.IntegerField()),
                ('username', models.CharField(max_length=30, unique=True)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.IntegerField()),
                ('is_active', models.IntegerField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.SmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LdevList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial', models.CharField(blank=True, max_length=255, null=True)),
                ('ldev', models.CharField(blank=True, max_length=255, null=True)),
                ('vol_capacity', models.IntegerField(blank=True, db_column='VOL_Capacity', null=True)),
                ('ports', models.CharField(blank=True, db_column='PORTS', max_length=255, null=True)),
                ('raid_level', models.CharField(blank=True, db_column='RAID_LEVEL', max_length=255, null=True)),
                ('raid_type', models.CharField(blank=True, db_column='RAID_TYPE', max_length=255, null=True)),
                ('raid_groups', models.CharField(blank=True, db_column='RAID_GROUPS', max_length=255, null=True)),
                ('hostname', models.CharField(blank=True, db_column='HOSTNAME', max_length=255, null=True)),
                ('hlun_id', models.IntegerField(blank=True, db_column='HLUN_ID', null=True)),
            ],
            options={
                'db_table': 'ldev_list',
            },
        ),
        migrations.CreateModel(
            name='NasAggregate',
            fields=[
                ('uuid', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('state', models.CharField(max_length=255)),
                ('sizetotal', models.CharField(blank=True, db_column='sizeTotal', max_length=255, null=True)),
                ('sizeused', models.CharField(blank=True, db_column='sizeUsed', max_length=255, null=True)),
                ('sizeusedpercent', models.FloatField(blank=True, db_column='sizeUsedPercent', null=True)),
                ('sizeavail', models.CharField(blank=True, db_column='sizeAvail', max_length=255, null=True)),
                ('sizeavailpercent', models.FloatField(blank=True, db_column='sizeAvailPercent', null=True)),
                ('raidtype', models.CharField(blank=True, db_column='raidType', max_length=255, null=True)),
                ('raidsize', models.CharField(blank=True, db_column='raidSize', max_length=10, null=True)),
                ('isrootaggregate', models.CharField(blank=True, db_column='isRootAggregate', max_length=10, null=True)),
                ('updatetime', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'nas_aggregate',
            },
        ),
        migrations.CreateModel(
            name='NasCluster',
            fields=[
                ('uuid', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('serialnumber', models.CharField(db_column='serialNumber', max_length=255)),
                ('managementip', models.CharField(blank=True, db_column='managementIp', max_length=255, null=True)),
                ('version', models.CharField(blank=True, max_length=255, null=True)),
                ('rawdiskbytestotal', models.CharField(blank=True, db_column='rawDiskBytesTotal', max_length=255, null=True)),
                ('rawdiskbytesused', models.CharField(blank=True, db_column='rawDiskBytesUsed', max_length=255, null=True)),
                ('state', models.CharField(blank=True, max_length=255, null=True)),
                ('updatetime', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'nas_cluster',
            },
        ),
        migrations.CreateModel(
            name='NasNode',
            fields=[
                ('uuid', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('serialnumber', models.CharField(db_column='serialNumber', max_length=255)),
                ('state', models.CharField(blank=True, max_length=255, null=True)),
                ('rawdiskbytestotal', models.CharField(blank=True, db_column='rawDiskBytesTotal', max_length=255, null=True)),
                ('rawdiskbytesused', models.CharField(blank=True, db_column='rawDiskBytesUsed', max_length=255, null=True)),
                ('aggregatebytestotal', models.CharField(blank=True, db_column='aggregateBytesTotal', max_length=255, null=True)),
                ('aggregatebytesused', models.CharField(blank=True, db_column='aggregateBytesUsed', max_length=255, null=True)),
                ('isfailoverenabled', models.IntegerField(blank=True, db_column='isFailoverEnabled', null=True)),
                ('istakeoverpossible', models.IntegerField(blank=True, db_column='isTakeOverPossible', null=True)),
                ('updatetime', models.DateTimeField(blank=True, null=True)),
                ('clusterid', models.ForeignKey(db_column='clusterId', on_delete=django.db.models.deletion.DO_NOTHING, to='index.NasCluster')),
            ],
            options={
                'db_table': 'nas_node',
            },
        ),
        migrations.CreateModel(
            name='NasVolume',
            fields=[
                ('uuid', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('sizetotal', models.CharField(blank=True, db_column='sizeTotal', max_length=255, null=True)),
                ('sizeused', models.CharField(blank=True, db_column='sizeUsed', max_length=255, null=True)),
                ('sizeusedpercent', models.FloatField(blank=True, db_column='sizeUsedPercent', null=True)),
                ('sizeavail', models.CharField(blank=True, db_column='sizeAvail', max_length=255, null=True)),
                ('sizeavailpercent', models.FloatField(blank=True, db_column='sizeAvailPercent', null=True)),
                ('isvserverroot', models.CharField(blank=True, db_column='isVserverRoot', max_length=10, null=True)),
                ('state', models.CharField(blank=True, max_length=255, null=True)),
                ('junctionpath', models.CharField(blank=True, db_column='junctionPath', max_length=255, null=True)),
                ('updatetime', models.DateTimeField(blank=True, null=True)),
                ('aggregateid', models.ForeignKey(db_column='aggregateId', on_delete=django.db.models.deletion.DO_NOTHING, to='index.NasAggregate')),
                ('clusterid', models.ForeignKey(db_column='clusterId', on_delete=django.db.models.deletion.DO_NOTHING, to='index.NasCluster')),
                ('nodeid', models.ForeignKey(db_column='nodeId', on_delete=django.db.models.deletion.DO_NOTHING, to='index.NasNode')),
            ],
            options={
                'db_table': 'nas_volume',
            },
        ),
        migrations.CreateModel(
            name='NasVserver',
            fields=[
                ('uuid', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('state', models.CharField(max_length=255)),
                ('volumebytesused', models.CharField(blank=True, db_column='volumeBytesUsed', max_length=255, null=True)),
                ('volumebytesavail', models.CharField(blank=True, db_column='volumeBytesAvail', max_length=255, null=True)),
                ('volumebytestotal', models.CharField(blank=True, db_column='volumeBytesTotal', max_length=255, null=True)),
                ('updatetime', models.DateTimeField(blank=True, null=True)),
                ('clusterid', models.ForeignKey(db_column='clusterId', on_delete=django.db.models.deletion.DO_NOTHING, to='index.NasCluster')),
            ],
            options={
                'db_table': 'nas_vserver',
            },
        ),
        migrations.AddField(
            model_name='nasvolume',
            name='vserverid',
            field=models.ForeignKey(db_column='vserverId', on_delete=django.db.models.deletion.DO_NOTHING, to='index.NasVserver'),
        ),
        migrations.AddField(
            model_name='nasaggregate',
            name='clusterid',
            field=models.ForeignKey(db_column='clusterId', on_delete=django.db.models.deletion.DO_NOTHING, to='index.NasCluster'),
        ),
        migrations.AddField(
            model_name='nasaggregate',
            name='nodeid',
            field=models.ForeignKey(db_column='nodeId', on_delete=django.db.models.deletion.DO_NOTHING, to='index.NasNode'),
        ),
    ]
